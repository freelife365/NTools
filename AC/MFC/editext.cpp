// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "editext.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"

namespace acm{
/////////////////////////////////////////////////////////////////////////////
// CEditExt

IMPLEMENT_DYNCREATE(CEditExt, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CEditExt properties

unsigned long CEditExt::GetBackColor()
{
	unsigned long result;
	GetProperty(0x1, VT_I4, (void*)&result);
	return result;
}

void CEditExt::SetBackColor(unsigned long propVal)
{
	SetProperty(0x1, VT_I4, propVal);
}

long CEditExt::GetBorderStyle()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CEditExt::SetBorderStyle(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

unsigned long CEditExt::GetForeColor()
{
	unsigned long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CEditExt::SetForeColor(unsigned long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

long CEditExt::GetTextFormat()
{
	long result;
	GetProperty(0x4, VT_I4, (void*)&result);
	return result;
}

void CEditExt::SetTextFormat(long propVal)
{
	SetProperty(0x4, VT_I4, propVal);
}

long CEditExt::GetDecimaldigits()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CEditExt::SetDecimaldigits(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

CString CEditExt::GetText()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CEditExt::SetText(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

COleFont CEditExt::GetFont()
{
	LPDISPATCH pDispatch;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&pDispatch);
	return COleFont(pDispatch);
}

void CEditExt::SetFont(LPDISPATCH propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

BOOL CEditExt::GetReadOnly()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CEditExt::SetReadOnly(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CEditExt operations

void CEditExt::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

VARIANT CEditExt::GetValue()
{
	VARIANT result;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CEditExt::SetValue(const VARIANT& vvar)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &vvar);
}



}